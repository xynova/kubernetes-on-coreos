
export CORE_HOME=/home/core
export SHARED_FILES_DIR=$CORE_HOME/shared-files
cd $CORE_HOME

export MACHINE_IP=$(awk -F= '/COREOS_PRIVATE_IPV4/ {print $2}' /etc/environment)
export ETCD_ENDPOINTS=${ETCD_ENDPOINTS:=http://172.17.4.51:2379}

export KUBE_VERSION=1.2.4
export HYPERKUBE_VERSION=v${KUBE_VERSION}
export HYPERKUBE_IMAGE_REPO=gcr.io/google_containers/hyperkube


sudo mkdir -p /etc/kubernetes/ssl
sudo mkdir -p /etc/kubernetes/manifests
sudo mkdir -p /srv/kubernetes/manifests







#DOWNLOAD KUBLET AND KUBECTL
#--------------------------------------

sudo mkdir -p /opt/bin

# KUBELET
cd /opt/bin && wget --timestamping https://storage.googleapis.com/kubernetes-release/release/v${KUBE_VERSION}/bin/linux/amd64/kubelet && sudo chmod +x kubelet

# KUBECTL
cd /opt/bin && wget --timestamping https://storage.googleapis.com/kubernetes-release/release/v${KUBE_VERSION}/bin/linux/amd64/kubectl && sudo chmod +x kubectl






#API SERVER
#--------------------------------------

export SERVICES_IP_BLOCK=10.3.0.0/24

cat << EOF | sudo tee /etc/kubernetes/manifests/kube-apiserver.yml
apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-apiserver
    image: ${HYPERKUBE_IMAGE_REPO}:${HYPERKUBE_VERSION}
    command:
    - /hyperkube
    - apiserver
    - --admission-control=AlwaysAdmit
    - --advertise-address=${MACHINE_IP}
    - --allow-privileged=true
    - --apiserver-count=1
    - --authorization-mode=AlwaysAllow
    - --bind-address=0.0.0.0    
#    - --client-ca-file=/etc/kubernetes/ssl/ca.pem
#    - --etcd-cafile=""
#    - --etcd-certfile=""
#    - --etcd-keyfile=""
#    - --etcd-prefix=/registry
    - --etcd-quorum-read=false
    - --etcd-servers=${ETCD_ENDPOINTS}
#    - --insecure-bind-address=127.0.0.1
    - --insecure-bind-address=0.0.0.0
    - --insecure-port=8080
    - --kubernetes-service-node-port=0
    - --secure-port=6443   
#    - --service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --service-account-lookup=false
    - --service-cluster-ip-range=${SERVICES_IP_BLOCK}
#    - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
#    - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem    
    - --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true
    ports:
#    - containerPort: 443
#      hostPort: 443
#      name: https
    - containerPort: 8080
      hostPort: 8080
      name: local
    volumeMounts:
    - mountPath: /etc/kubernetes/ssl
      name: ssl-certs-kubernetes
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-certs-kubernetes
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF







#CONTROLLER MANAGER
#--------------------------------------


cat << EOF | sudo tee /etc/kubernetes/manifests/kube-controller-manager.yml
apiVersion: v1
kind: Pod
metadata:
  name: kube-controller-manager
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-controller-manager
    image: ${HYPERKUBE_IMAGE_REPO}:${HYPERKUBE_VERSION}
    command:
    - /hyperkube
    - controller-manager
    - --address=0.0.0.0
    - --cluster-name="kubernetes"
    - --leader-elect=true
    - --master=http://127.0.0.1:8080
    - --port=10252
#    - --root-ca-file=/etc/kubernetes/ssl/ca.pem 
#    - --service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10252
      initialDelaySeconds: 15
      timeoutSeconds: 1
    volumeMounts:
    - mountPath: /etc/kubernetes/ssl
      name: ssl-certs-kubernetes
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  volumes:
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-certs-kubernetes
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF



#SCHEDULER
#--------------------------------------


cat << EOF | sudo tee /etc/kubernetes/manifests/kube-scheduler.yml
apiVersion: v1
kind: Pod
metadata:
  name: kube-scheduler
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-scheduler
    image: ${HYPERKUBE_IMAGE_REPO}:${HYPERKUBE_VERSION}
    command:
    - /hyperkube
    - scheduler
    - --address=0.0.0.0
    - --leader-elect=true
    - --master=http://127.0.0.1:8080
    - --port=10251
    - --scheduler-name=default-scheduler
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        path: /healthz
        port: 10251
      initialDelaySeconds: 15
      timeoutSeconds: 1
EOF




#KUBE PROXY
#--------------------------------------

cat << EOF | sudo tee /etc/kubernetes/manifests/kube-proxy.yml
apiVersion: v1
kind: Pod
metadata:
  name: kube-proxy
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-proxy
    image: ${HYPERKUBE_IMAGE_REPO}:${HYPERKUBE_VERSION}
    command:
    - /hyperkube
    - proxy
    - --bind-address=0.0.0.0
    - --healthz-bind-address=127.0.0.1
    - --healthz-port=10249
    - --hostname-override=${MACHINE_IP}
    - --master=http://127.0.0.1:8080
    - --proxy-mode=iptables
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
  volumes:
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host
EOF






#KUBELET MASTER
#--------------------------------------

export DNS_SERVICE_IP=10.3.0.10

cat << EOF | sudo tee /etc/systemd/system/kubelet.service
[Unit]
Description=Kubernetes Kubelet Master
Documentation=http://kubernetes.io/docs/admin/kubelet
After=flanneld.service
Requires=flanneld.service

[Service]
ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests

ExecStart=/opt/bin/kubelet \
  --address=0.0.0.0 \
  --allow-privileged=true \
  --api-servers=http://127.0.0.1:8080 \
  --cadvisor-port=4194 \
  --cluster-dns=${DNS_SERVICE_IP} \
  --cluster-domain=cluster.local \
  --config=/etc/kubernetes/manifests \
  --file-check-frequency=20s \
  --healthz-bind-address=127.0.0.1 \
  --healthz-port=10248 \
  --hostname-override=${MACHINE_IP} \
  --http-check-frequency=20s \
  --image-gc-high-threshold=90 \
  --image-gc-low-threshold=80 \
  --low-diskspace-threshold-mb=256 \
  --minimum-container-ttl-duration=1m0s \
  --minimum-image-ttl-duration=2m0s \
  --node-ip=${MACHINE_IP} \
  --port=10250 \
  --read-only-port=10255 \
  --register-node=true \
  --register-schedulable=false

Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl stop kubelet.service
sudo systemctl daemon-reload
sudo systemctl enable kubelet.service
sudo systemctl start kubelet.service










