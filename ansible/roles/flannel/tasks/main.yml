---


- block:
  - name: Create network key in Etcd
    shell: >
      /usr/bin/etcdctl --cert-file={{ kube_systemAccount_cert }} --key-file={{ kube_systemAccount_key }}  --endpoints={{ etcd_endpoints }} 
      set /coreos.com/network/config '{ "Network": "{{ flanel_network_block }}" , "Backend":{"Type":"{{ flannel_network_backend_type }}"} }'
    run_once: true

  - name: Create flannel and docker service extension directories
    file: path={{ item }} state=directory recurse=true
    with_items:
      - /etc/flannel
      - /etc/systemd/system/flanneld.service.d
      - /etc/systemd/system/docker.service.d
      - /etc/ssl/etcd

  - name: Copy kube-ca and etcd client certs into /etc/ssl/etcd directory mounted by flanneld rtk service
    shell: cp -f {{ item }} /etc/ssl/etcd/
    with_items:
      - "{{ kube_ca_cert }}"
      - "{{ kube_systemAccount_cert }}"
      - "{{ kube_systemAccount_key }}"

  - name: Create flannel service extension files
    template: src={{ item.src }} dest={{ item.dest }}
    with_items:
      - { src: flannel-options.env.j2, dest: /etc/flannel/options.env }
      - { src: flannel-options.conf.j2, dest: /etc/systemd/system/flanneld.service.d/40-link-options.conf }
      - { src: waitForFlanneld.conf.j2, dest: /etc/systemd/system/docker.service.d/30-waitForFlanneld.conf }

  - name: Cleanup previous docker network state
    shell: |
      systemctl stop docker
      ifconfig docker0 down 2> /dev/null
      brctl delbr docker0 2> /dev/null
      rm -r /var/lib/docker/network
      systemctl daemon-reload
    ignore_errors: true

  - name: Reload systemd daemon, enable and restart flanned and docker services
    service: name={{ item }} enabled=true state=restarted
    ignore_errors: true
    with_items:
      - flanneld
      - docker

  become: true
  become_method: sudo


